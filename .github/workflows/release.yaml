on:
  push:
    branches:
      - test-actions
  #schedule:
  #  - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      only:
        description: 'Specific image name to build'
        type: string
        required: false
        default: ''
concurrency: release
jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
      matrix-unique-images: ${{ steps.generate-matrix.outputs.matrix-unique-images }}
    steps:
    - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
    # For manual builds, build only the image requested
    - id: generate-matrix-manual
      if: ${{ github.event_name == 'workflow_dispatch' && inputs.only != '' }}
      uses: ./.github/actions/generate-matrix
      with:
        modified-files: images/${{ inputs.only }}/image.yaml
    # For nightly builds, build every image (or on manual with no "only" input)
    - id: generate-matrix-schedule
      if: ${{ github.event_name == 'schedule' || ( github.event_name == 'workflow_dispatch' && inputs.only == '' ) }}
      uses: ./.github/actions/generate-matrix
    # On push to main branch, only build images necessary
    - id: files
      if: ${{ github.event_name != 'schedule' && github.event_name != 'workflow_dispatch' }}
      uses: jitterbit/get-changed-files@b17fbb00bdc0c0f63fcf166580804b4d2cdc2a42 # v1
      with:
        format: csv
    - id: generate-matrix-main
      if: ${{ github.event_name != 'schedule' && github.event_name != 'workflow_dispatch' }}
      uses: ./.github/actions/generate-matrix
      with:
        modified-files: ${{ steps.files.outputs.all }}
    - id: generate-matrix
      run: |
        set -x
        trap "rm -f matrix.json matrix-unique-images.json" EXIT
        echo '${{ steps.generate-matrix-manual.outputs.matrix }}' > matrix.json
        [[ "$(cat matrix.json)" != "" ]] || echo '${{ steps.generate-matrix-schedule.outputs.matrix }}' > matrix.json
        [[ "$(cat matrix.json)" != "" ]] || echo '${{ steps.generate-matrix-main.outputs.matrix }}' > matrix.json
        echo "matrix=$(cat matrix.json)" >> $GITHUB_OUTPUT
        echo '${{ steps.generate-matrix-manual.outputs.matrix-unique-images }}' > matrix-unique-images.json
        [[ "$(cat matrix-unique-images.json)" != "" ]] || echo '${{ steps.generate-matrix-schedule.outputs.matrix-unique-images }}' > matrix-unique-images.json
        [[ "$(cat matrix-unique-images.json)" != "" ]] || echo '${{ steps.generate-matrix-main.outputs.matrix-unique-images }}' > matrix-unique-images.json
        echo "matrix-unique-images=$(cat matrix-unique-images.json)" >> $GITHUB_OUTPUT
  build:
    runs-on: ubuntu-latest
    needs: generate-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    permissions:
      id-token: write
      packages: write
      contents: read
      actions: read
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
      - id: release-image-inputs
        name: Add additional inputs for release-image action
        env:
          EXTRA_INPUT_SLACK_WEBHOOK_URL: ${{ secrets.DISTROLESS_SLACK_WEBHOOK }}
          EXTRA_INPUT_GCS_AUTH_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCS_AUTH_WORKLOAD_IDENTITY_PROVIDER }}
          EXTRA_INPUT_GCS_AUTH_SERVICE_ACCOUNT: ${{ secrets.GCS_AUTH_SERVICE_ACCOUNT }}
          EXTRA_INPUT_GCS_AUTH_PROJECT_ID: ${{ secrets.GCS_AUTH_PROJECT_ID }}
          EXTRA_INPUT_GCS_BUCKET_NAME: chainguard-images-build-outputs
        run: |
          # convert env vars beginning with "EXTRA_INPUT_"
          # to camelcased input variables passed to next step
          set -x
          echo '${{ toJSON(matrix) }}' > inputs.json
          for kv in `env | grep '^EXTRA_INPUT_' | sed 's/^EXTRA_INPUT_//'`; do
            k="$(echo "${kv}" | cut -d "=" -f1 | tr '[:upper:]' '[:lower:]' | sed -r 's/(.)_+(.)/\1\U\2/g;s/^[a-z]/\U&/' | sed 's/.*/\l&/')"
            v="$(echo "${kv}" | cut -d "=" -f2)"
            cat inputs.json | jq -c '. + {'${k}': "'${v}'"}' > inputs.json.tmp
            mv inputs.json.tmp inputs.json
          done
          echo "release-image-inputs=$(cat inputs.json | tr -d '\n')" >> $GITHUB_OUTPUT
      # Sleep a random amount of time up to 2 minutes.
      # This staggers our pushes, to hopefully avoid hitting rate limits.
      # See https://github.com/chainguard-images/images/issues/173
      - name: Random Sleep
        run: sleep $(( ( RANDOM % 120 )  + 1 ))
      - uses: ./.github/actions/release-image
        with: ${{ fromJSON(steps.release-image-inputs.outputs.release-image-inputs) }}
      - uses: ./.github/actions/policy-check-image
        with: ${{ fromJSON(steps.release-image-inputs.outputs.release-image-inputs) }}

  image-summary:
    runs-on: ubuntu-latest
    needs: [generate-matrix, build]
    if: always()
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix-unique-images) }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
      - id: image-summary-inputs
        name: Add additional inputs for image-summary action
        env:
          EXTRA_INPUT_SLACK_WEBHOOK_URL: ${{ secrets.DISTROLESS_SLACK_WEBHOOK }}
          EXTRA_INPUT_GCS_AUTH_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCS_AUTH_WORKLOAD_IDENTITY_PROVIDER }}
          EXTRA_INPUT_GCS_AUTH_SERVICE_ACCOUNT: ${{ secrets.GCS_AUTH_SERVICE_ACCOUNT }}
          EXTRA_INPUT_GCS_AUTH_PROJECT_ID: ${{ secrets.GCS_AUTH_PROJECT_ID }}
          EXTRA_INPUT_GCS_BUCKET_NAME: chainguard-images-build-outputs
        run: |
          # convert env vars beginning with "EXTRA_INPUT_"
          # to camelcased input variables passed to next step
          set -x
          echo '${{ toJSON(matrix) }}' > inputs.json
          for kv in `env | grep '^EXTRA_INPUT_' | sed 's/^EXTRA_INPUT_//'`; do
            k="$(echo "${kv}" | cut -d "=" -f1 | tr '[:upper:]' '[:lower:]' | sed -r 's/(.)_+(.)/\1\U\2/g;s/^[a-z]/\U&/' | sed 's/.*/\l&/')"
            v="$(echo "${kv}" | cut -d "=" -f2)"
            cat inputs.json | jq -c '. + {'${k}': "'${v}'"}' > inputs.json.tmp
            mv inputs.json.tmp inputs.json
          done
          echo "image-summary-inputs=$(cat inputs.json | tr -d '\n')" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/image-summary
        with: ${{ fromJSON(steps.image-summary-inputs.outputs.image-summary-inputs) }}
